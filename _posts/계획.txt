강의 계획 시 중점에 둘 것
이해, 실습, 큰 그림.

20시간 강의의 목표 : 수료 후 간단한 딥러닝 프로젝트를 직접 수행 가능.

필수 : 파이썬 사용법
파이썬 사용법부터 시작할 시간은 없음. 다행히 사용하기 쉽고 직관적이기로 유명한 언어인만큼 다른 프로그래밍 언어를 배운 사람이면 엄청 쉬우니 따로 준비 부탁.


1,3일차는 핵심적인 이론과 그 이론의 정확한 이해를 위한 실습이 제공된다.
1일차 인공신경망 그 이해
목표:
    -딥러닝과 그 근간이 되는 인공신경망의 원리
    -인공신경망을 이용해 문제를 푸는 방법
    -위 방법을 구현하는 방법(numpy)
    -계산 그래프를 이용한 신경망 학습 파이프라인

2일차 머신러닝 프로젝트와 딥러닝 라이브러리
목표:
    -딥러닝 라이브러리소개
    -딥러닝 라이브러리를 이용한 1일차 복습.
    -간단한 모델 구현, 학습. xor
     -머신러닝 프로젝트
            학습(그동안 배운 것)
            데이터 로딩
                epoch, iteration, batch, learning rate
            모델 저장, 불러오기
            초기화 방법
            일반화(오버피팅 방지법)
            평가 방법
            visualization
      학습 개선을 위한 일반적인 방법
            전처리
            정규화
            Batchnormalization
            dropout
            optimizer 커스텀

3일차 CNN과 그 이해
    이미지 데이터 기초.
    cnn 소개와 기본 구조 (실습 x)
    numpy를 이용한 cnn 구현(계산 그래프)
    pytorch를 이용한 cnn classifier 구현 - MNIST

4일차 CNN 심화
    발전된 cnn 소개
    구현해보기(inception module, residual block)
    잘 알려진 모델구조 불러오기, pretrained model, fine tuning, <- 흔한 사용법
    최근 동향 - auto ml, 등.. 최적의 구조(실습 없음)

5일차
    위 수업이 밀릴 가능성이 높은데 그걸로 채운다.
    만약 안밀린다면...? 경과 보고 결정

6일차 프로젝트
    배운거 복습.
    이제 정말 기본적인 것들을 거의 다 배웠다.
    하지만 이거만 알고 있다고 해서 모든 문제를 자동으로 풀 수 있게 되는 것은 아니다.
   여러분이 실제로 일할때 딥러닝을 적용하거나 자신만의 프로그램을 만들때는
    처음 들어보는 개념들을 오늘 배운것들을 응용해서 해결해나가야 한다.
    배운것들이 어떻게 응용할 수 있는지 한번 처음 들어보는 개념으로 실습해보자.

    지금부터 분류기가 아닌 유명한 모델인 GAN에 대해서 설명할 것이다.
    설명을 듣고 배운 것들을 응용해서 간단한 GAN 모델을 구현해보자.
    GAN에 대해서 설명해준다.
    완전 다르진 않으나 약간의 구조 변경과 학습과정 변경으로 얼마나 멋진 일을 할 수 있는지에 대한 예시이다.

    CIFAR 100 GAN 프로젝트
    (CIFAR100으로 GAN을 구현하고 제한시간 내에 학습할 수 있는지부터 확인하고 안되면 MNIST하자..)
    시나리오 : 위조 데이터 판별
    classifier에 해당하는 discriminator와
    가짜데이터를 생성하는 generator
    제공 되는 것 : cifar 100 데이터 로더 코드. hyperparameter

    구현 가이드 라인
    모델 구현- 그림으로 적당한 모델을 보여줌. 보고 구현으로 옮길것
    학습 과정 구현 - GAN의 목적함수는 기존 classifier의 목적함수와 다르다.
                    어떻게 학습 구조를 짜야 할까?
    저장된 모델로부터 이미지 데이터 만들어내기 - 생성된 데이터 관찰


수업은 다음과 같이 진행된다.
30분 수업- 20분 실습- 10분 휴식 3번.
1일차
    개요
        개요
        딥러닝이 왜 중요한지에 대해서 긴 사설은 생략합니다. 고급 과정이니까 이해하시고오셨을 것으로..
        최근 머신러닝/딥러닝 분야는 넓고 매우 빠르게 변화함.
        최신 기술들에 대한 동향이나 크고 어려운 프로젝트들을 수업하고 모두 실습하기에는 시간이 부족하다.
        겉핥기밖에 할 수 없고 들어본 적은 있지만 정확히는 모르는 결과를 얻을 것.
        따라서 가장 기본이라고 할 수 있는 ANN/CNN을 이용한 수업을 진행하되, 매일 실습을 병행하며 남들에게 설명할 수 있을 정도로 ‘알’ 수 있게 할것.

        요즘 시대에 사실 인터넷에도 많은 자료가 있으며 무료 강의도 많은 만큼 여기서 진행하는 것이 유니크한것은 아니다.
        초급과정에서도 전반적으로 많은 것들을 배운것으로 알고있는데, 배운것들은 집에서 구글링 해보면 실습자료들이 많다.
        하지만 실제로 해보지는 않은 사람들이 많을 것이다. 사실 공부하는거만으로도 충분히 힘들고 어려운일이기 때문에 자기 시간 쪼개서 잘 모르는 분야의 실습 환경을 찾고
        스스로 실습할 수 있는 사람은 정말 드물다. 실습의 비중을 늘렸으면 좋겠다는 피드백이 많았다고 들었다.

        이번 수업을 직접 공부하고 실습해보면서 핵심적인 원리에 대한 이해와 프로젝트 경험을 얻을 기회로 삼으면 좋겠다.
        프로그래밍 언어가 서로 구조적으로 비슷하기 때문에 하나를 익히는게 어려울 뿐 하나를 익히면 다른 언어로 넘어가는건 아주 쉽다는 이야기를 들어봤을 것이다.
        머신러닝 프로젝트들도 큰 흐름은 거의 비슷하다. 세부적인 알고리즘과 학습 순서, 데이터 등이 다를 뿐. 자연어처리든 강화학습이든 큰 흐름은 유사.
        따라서 간단한 프로젝트더라도 하나의 프로젝트를 수행해보고 그 흐름을 이해한다면 추가적으로 관심있는 분야를 더 공부하여 해당 분야로 진출하는데 큰 도움이 될것.

        이번 강좌가 그런 부분에서 도움이 되었으면 한다.

        이 수업은 완전 기초부터 시작하여 라이브러리를 쓰지 않고 인공신경망을 만드는 것부터 시작하여
        라이브러리를 응용하는 것까지 진행된다. 최종적으로는 딥러닝 라이브러리를 쓰게 되며 회사에서도 라이브러리를 쓸 것.

        실습
            구현 환경 만들기
            1. anaconda를 이용한 실습 환경 만들기
                노트북으로는 gpu이용한 딥러닝 코드를 돌리기 힘들고 돌리더라도 너무 오래 걸려서 실습할 수 없음.
                집에 있는 데스크탑에 설정해서 연습할꺼라면 이쪽을 사용.
            2. google colab
                구글 컴퓨터에 원격 접속하여 코드를 돌릴 수 있는 사이트.
                간단한 사용법, 라이브러리 인스톨 등 소개. 앞으로 실습은 기본적으로 코랩을 이용할 것
                (사람마다 컴퓨터가 달라서 별도의 이슈가 생길 경우 수업 중 전부 대처하기 힘들다)

    ANN에 대한 이해
        딥러닝은 인공신경망의 확장이며 깊게 많은 인공신경망 레이어를 쌓은 것.
        따라서 딥러닝 프로젝트를 위해서는 인공신경망에 대한 이해가 필수적.

        회귀분석에서 얻는 직관, 함수 근사기. '거의 대부분의' 함수를 근사할 수 있다.
        데이터와 목적함수, 인간의 개입없는 자동학습과 이를 가능하게 하는 backpropagation과 gradient descent
        인공신경망이 딥러닝이 될 수 있었던 요소들 - 다른 머신러닝 알고리즘들과의 차별화
        stochastic gradient descent와 온라인,미니배치 학습
        vanishing gradient 정복
        gpu 연산

        딥러닝으로 풀 수 있는 문제 예시
            신경망의 함수근사 능력이 어떻게 활용되는지를 중심으로
            분류기(대표적,일반적인 모델)
            오토 인코더
            생성 모델 등...


    ANN의 선형 대수 구현 - numpy
        이미 딥러닝이 모두의 관심을 받은지도 오래되었고, 많은 공개 라이브러리들이 있으며 기업들에서도 대부분 이런것들을 가져다 쓴다.
        우리도 실제 프로젝트에서는 이런 라이브러리들을 가져다 쓸 것이다. 이것은 생산성,협업 측면에서 매우 큰 도움이 된다.
        하지만 학습에 대한 이해를 위해서는 라이브러리들이 블랙박스로 감춰둔 안쪽에 있는 코드들을 이해해야 한다.
        정확히 모르고..그러니까 대충 알고 사용할수만 있는것과 이해를 하고 쓰는것은 천지차이이다.
        예를들어, (대충 옵티마이저 코드) run 이라고 써있는 코드를 보자.
        이 옵티마이저를 이용하여 옵티마이징을 한다는 뜻이다. 마치 버튼을 누르는것처럼 편하다.
        옵티마이저는 backpropagation을 반복하여 신경망 가중치를 갱신해주는 역할을 한다.
        하지만 여기까지만 안다면 특정 문제에서 optimizer를 바꿔야 하는 문제가 발생하면 아무것도 할 수 없다.
        딥러닝을 한다는것은 인공신경망을 쓴다는것이고, 인공신경망에 대한 추상적인 이해만으로는 실제 프로젝트에 발생하는 많은 이슈와
        이를 개선하기위해 제안된 많은 알고리즘들의 정확한 의미를 이해하는데 매우 부족하다.

    ANN의 그래프 표현 - backpropagation 자동화



토요일에 5시간 수업에서 5일에 배운 것들을 활용하여 작은 프로젝트 하나를 진행할 것이다.

